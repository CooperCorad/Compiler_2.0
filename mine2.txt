./a.out -l 000.jpl
// OK

/* Example 5: Convert image to grayscale.
 * https://en.wikipedia.org/wiki/Grayscale
 */

fn gamma_decompress(x : float) : float {
   assert (0.0 <= x) && (x <= 1.0), "gamma_decompress argument out of range"
   return \
     if (x <= 0.04045) then (x / 12.92) else \
     pow((x + 0.055) / 1.055, 2.4)
}

fn gamma_compress(x : float) : float {
   assert (0.0 <= x) && (x <= 1.0), "gamma_decompress argument out of range"
   return pow(x, 2.2)
}

fn grayscale_pixel({r : float, g : float, b : float, a : float}) : {float,float,float,float} {
   let r_linear = gamma_decompress(r)
   let g_linear = gamma_decompress(g)
   let b_linear = gamma_decompress(b)
   let y_linear = (0.2126 * r_linear )+ (0.7152 * g_linear) + (0.0722 * b_linear)
   let y = gamma_compress(y_linear)
   return {y, y, y, 1.0}
}

read image "photo.png" to photo_image[W, H]
let grayscale_image = array[i : W, j : H] grayscale_pixel(photo_image[i,j])
write image grayscale_image to "photo_gray.png"
~~~~
NEWLINE
FN 'fn'
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'x'
COLON ':'
FLOAT 'float'
RPAREN ')'
COLON ':'
FLOAT 'float'
LCURLY '{'
NEWLINE
ASSERT 'assert'
LPAREN '('
FLOATVAL '0.0'
OP '<='
VARIABLE 'x'
RPAREN ')'
OP '&&'
LPAREN '('
VARIABLE 'x'
OP '<='
FLOATVAL '1.0'
RPAREN ')'
COMMA ','
STRING '"gamma_decompress argument out of range"'
NEWLINE
RETURN 'return'
IF 'if'
LPAREN '('
VARIABLE 'x'
OP '<='
FLOATVAL '0.04045'
RPAREN ')'
THEN 'then'
LPAREN '('
VARIABLE 'x'
OP '/'
FLOATVAL '12.92'
RPAREN ')'
ELSE 'else'
VARIABLE 'pow'
LPAREN '('
LPAREN '('
VARIABLE 'x'
OP '+'
FLOATVAL '0.055'
RPAREN ')'
OP '/'
FLOATVAL '1.055'
COMMA ','
FLOATVAL '2.4'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'gamma_compress'
LPAREN '('
VARIABLE 'x'
COLON ':'
FLOAT 'float'
RPAREN ')'
COLON ':'
FLOAT 'float'
LCURLY '{'
NEWLINE
ASSERT 'assert'
LPAREN '('
FLOATVAL '0.0'
OP '<='
VARIABLE 'x'
RPAREN ')'
OP '&&'
LPAREN '('
VARIABLE 'x'
OP '<='
FLOATVAL '1.0'
RPAREN ')'
COMMA ','
STRING '"gamma_decompress argument out of range"'
NEWLINE
RETURN 'return'
VARIABLE 'pow'
LPAREN '('
VARIABLE 'x'
COMMA ','
FLOATVAL '2.2'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'grayscale_pixel'
LPAREN '('
LCURLY '{'
VARIABLE 'r'
COLON ':'
FLOAT 'float'
COMMA ','
VARIABLE 'g'
COLON ':'
FLOAT 'float'
COMMA ','
VARIABLE 'b'
COLON ':'
FLOAT 'float'
COMMA ','
VARIABLE 'a'
COLON ':'
FLOAT 'float'
RCURLY '}'
RPAREN ')'
COLON ':'
LCURLY '{'
FLOAT 'float'
COMMA ','
FLOAT 'float'
COMMA ','
FLOAT 'float'
COMMA ','
FLOAT 'float'
RCURLY '}'
LCURLY '{'
NEWLINE
LET 'let'
VARIABLE 'r_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'r'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'g_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'g'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'b_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'b'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'y_linear'
EQUALS '='
LPAREN '('
FLOATVAL '0.2126'
OP '*'
VARIABLE 'r_linear'
RPAREN ')'
OP '+'
LPAREN '('
FLOATVAL '0.7152'
OP '*'
VARIABLE 'g_linear'
RPAREN ')'
OP '+'
LPAREN '('
FLOATVAL '0.0722'
OP '*'
VARIABLE 'b_linear'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'y'
EQUALS '='
VARIABLE 'gamma_compress'
LPAREN '('
VARIABLE 'y_linear'
RPAREN ')'
NEWLINE
RETURN 'return'
LCURLY '{'
VARIABLE 'y'
COMMA ','
VARIABLE 'y'
COMMA ','
VARIABLE 'y'
COMMA ','
FLOATVAL '1.0'
RCURLY '}'
NEWLINE
RCURLY '}'
NEWLINE
READ 'read'
IMAGE 'image'
STRING '"photo.png"'
TO 'to'
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'grayscale_image'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'grayscale_pixel'
LPAREN '('
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
RPAREN ')'
NEWLINE
WRITE 'write'
IMAGE 'image'
VARIABLE 'grayscale_image'
TO 'to'
STRING '"photo_gray.png"'
NEWLINE
END_OF_FILE
Compilation succeeded: lexical analysis complete
